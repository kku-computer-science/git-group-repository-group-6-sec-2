<?php
namespace App\Services\APIFetcher;

use App\Models\Author;
use App\Models\Paper;
use App\Models\Source_data;
use App\Models\User;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use Illuminate\Support\Facades\DB;

class WosAPIService
{
    private string $apiKey;
    public function __construct(string $apiKey){
        $this->apiKey = $apiKey;
    }

    public function getResearcherPublications($lName_fName): array
    {
        $client = new Client();
        try {
            $response = $client->request('GET', 'https://api.clarivate.com/apis/wos-starter/v1/documents', [
                'headers' => [
                    'X-ApiKey' => $this->apiKey,
                    'Accept' => 'application/json',
                ],
                'query' => [
                    'db' => 'WOS',
                    'q' => 'AU=' . $lName_fName,
                    'limit' => 50,
                    'page' => 1,
                ],
            ]);

            $jsonData = $response->getBody()->getContents();
            return json_decode($jsonData, true);

        } catch (GuzzleException $e) {
            error_log("Error while fetching Web of Science publication: " . $e->getMessage());
            return [] ;
        }
    }

    /**
     * @throws \Exception
     */
    public function saveWOSPublications(array $papers, string $userId): void
    {
        foreach ($papers['hits'] as $paper) {
            DB::beginTransaction();
            try {
                // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                $title = strtolower(trim($paper['title']));
                $doi = !empty($paper['identifiers']['doi']) ? strtolower(trim($paper['identifiers']['doi'])) : null;
                $paperModel = null;

                // üîç 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ DOI (Exact Match)
                if ($doi) {
                    $paperModel = Paper::whereRaw('LOWER(paper_doi) = ?', [$doi])->first();
                }
                else{
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ DOI ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
                    $paperModel = Paper::whereRaw('LOWER(paper_name) = ?', [$title])->first();
                }

                // üîç 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏î‡πâ‡∏ß‡∏¢ DOI, ‡πÉ‡∏ä‡πâ Full-Text Search
                if(!$paperModel) {
                    $papers = Paper::all(); //  Get all papers for comparison
                    foreach ($papers as $existingPaper) {
                        $existingTitle = strtolower(trim($existingPaper->paper_name));
                        similar_text($title, $existingTitle, $percent); // Calculate similarity

                        if ($percent > 90) {
                            $paperModel = $existingPaper;  //  Consider it the same paper
                            break; // Exit the loop once a match is found
                        }
                    }
                }

                if (!$paperModel) {
                    // üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Paper ‡πÉ‡∏´‡∏°‡πà
                    $paperModel = new Paper();
                    $paperModel->paper_name = trim($paper['title']);
                    $paperModel->paper_doi = $doi;
                    $paperModel->paper_type = !empty($paper['types'][0]) ? $paper['types'][0] : null;
                    $paperModel->paper_subtype = !empty($paper['sourceTypes'][0]) ? $paper['sourceTypes'][0] : null;
                    $paperModel->paper_sourcetitle = !empty($paper['source']['sourceTitle']) ? $paper['source']['sourceTitle'] : null;
                    $paperModel->paper_url = !empty($paper['links']['record']) ? $paper['links']['record'] : null;
                    $paperModel->paper_yearpub = !empty($paper['source']['publishYear']) ? (int)$paper['source']['publishYear'] : null;
                    $paperModel->paper_volume = !empty($paper['source']['volume']) ? (int)$paper['source']['volume'] : null;
                    $paperModel->paper_issue = !empty($paper['source']['issue']) ? (int)$paper['source']['issue'] : null;
                    $paperModel->paper_citation = !empty($paper['citations'][0]['count']) ? (int)$paper['citations'][0]['count'] : 0;
                    $paperModel->paper_page = !empty($paper['source']['pages']['range']) ? $paper['source']['pages']['range'] : null;
                    $paperModel->paper_funder = !empty($paper['names']['sponsors']['displayName']) ? $paper['names']['sponsors']['displayName'] : null;
                    $paperModel->keyword = !empty($paper['keywords']['authorKeywords']) ? json_encode($paper['keywords']['authorKeywords']) : null;
                    $paperModel->save();

                    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö Source_data (‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ source id 2)
                    $source = Source_data::findOrFail(2);
                    $paperModel->source()->sync([$source->id]);
                } else {
                    // üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Citation (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤)
                    if (!empty($paper['citations']) && isset($paper['citations'][0]['count'])) {
                        $citationCount = (int)$paper['citations'][0]['count'];
                        if ($paperModel->paper_citation < $citationCount) {
                            $paperModel->update(['paper_citation' => $citationCount]);
                        }
                    }
                }

                // üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á Authors (‡πÉ‡∏ä‡πâ syncWithoutDetaching ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥)
                $authorsArray = [];
                foreach ($paper['names']['authors'] as $author) {
                    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ
                    $authorData = explode(', ', $author['displayName']);
                    $fname = isset($authorData[1]) ? trim($authorData[1]) : '';
                    $lname = isset($authorData[0]) ? trim($authorData[0]) : '';
                    $authorsArray[] = ['fname' => $fname, 'lname' => $lname];
                }

                $authorCount = count($authorsArray);
                foreach ($authorsArray as $index => $authorData) {
                    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ User ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠
                    $user = User::where(function ($query) use ($authorData) {
                        $query->where([
                            ['fname_en', '=', $authorData['fname']],
                            ['lname_en', '=', $authorData['lname']]
                        ])
                            ->orWhere(function ($query) use ($authorData) {
                                $query->where(DB::raw("concat(left(fname_en,1),'.')"), '=', $authorData['fname'])
                                    ->where('lname_en', '=', $authorData['lname']);
                            })
                            ->orWhere(function ($query) use ($authorData) {
                                $query->where(DB::raw("left(fname_en,1)"), '=', $authorData['fname'])
                                    ->where('lname_en', '=', $authorData['lname']);
                            });
                    })->first();

                    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î author type: ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å = 1, ‡∏Ñ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ = 3, ‡∏Ñ‡∏ô‡∏Å‡∏•‡∏≤‡∏á = 2
                    $authorType = ($index === 0) ? 1 : (($index === $authorCount - 1) ? 3 : 2);

                    if ($user) {
                        $paperModel->teacher()->syncWithoutDetaching([$user->id => ['author_type' => $authorType]]);
                    } else {
                        $authorModel = Author::where('author_fname', $authorData['fname'])
                            ->where('author_lname', $authorData['lname'])
                            ->first();
                        if (!$authorModel) {
                            $authorModel = new Author();
                            $authorModel->author_fname = $authorData['fname'];
                            $authorModel->author_lname = $authorData['lname'];
                            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Author ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Paper ‡∏ú‡πà‡∏≤‡∏ô Eloquent Relationship
                            $paperModel->author()->save($authorModel, ['author_type' => $authorType]);
                        } else {
                            $paperModel->author()->syncWithoutDetaching([$authorModel->id => ['author_type' => $authorType]]);
                        }
                    }
                }

                // üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á Paper ‡∏Å‡∏±‡∏ö User (Owner)
                $user = User::findOrFail($userId);
                if (!$paperModel->teacher->contains($user->id)) {
                    $paperModel->teacher()->syncWithoutDetaching([$user->id]);
                }

                DB::commit();
            } catch (\Exception $e) {
                DB::rollBack();
                // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ log error ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ rethrow exception
                throw $e;
            }
        }
    }

}
